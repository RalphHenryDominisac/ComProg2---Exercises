/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prog2exer1;

import java.awt.Color;
import java.text.DateFormat;
import javax.swing.JOptionPane;
import java.time.LocalDate;

import java.time.Period;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.ListIterator;
import javax.swing.table.DefaultTableModel;




/**
 *
 * @author RALPH
 */
public class CustomerForm extends javax.swing.JFrame {
    ArrayList<Integer> deletedID = new ArrayList<Integer>();
    int increSave = 1;
 //   int stringID;
//    String strID;
    
    int id = 0;
    String[][] cust = new String[10][7];
    
    
    
    
    /**
     * Creates new form CustomerForm
     */
    public CustomerForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cgender = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cid = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cemail = new javax.swing.JTextField();
        elabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbday = new javax.swing.JTextField();
        bdaylabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        custname = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        custcontact = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Customer Address");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Customer Registration System");

        cgender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Customer ID");

        jLabel5.setText("Customer E-mail");

        cemail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cemailKeyReleased(evt);
            }
        });

        elabel.setText("[a-z]@[a-z].com");

        jLabel6.setText("Customer Bday");

        cbday.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cbdayKeyReleased(evt);
            }
        });

        bdaylabel.setText("mm/dd/yyyy");

        jLabel7.setText("Customer Name");

        jLabel8.setText("lastname, firstname");

        jLabel9.setText("Customer Contact #");

        jLabel10.setText("Customer Gender");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        mainTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Address", "Contact", "Email", "Bday", "Gender"
            }
        ));
        mainTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mainTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        jMenu3.setText("File");

        jMenuItem1.setText("Products");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Orders");
        jMenu3.add(jMenuItem2);

        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(26, 26, 26)
                                        .addComponent(cemail))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbday))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(custname)
                                            .addComponent(cname)
                                            .addComponent(custcontact)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(cid, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(elabel)
                                    .addComponent(jLabel8)
                                    .addComponent(bdaylabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(updateButton)
                            .addComponent(deleteButton)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(custname)
                    .addComponent(jLabel8))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cname))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(custcontact))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cemail)
                    .addComponent(elabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbday)
                    .addComponent(bdaylabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateButton)
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>                        

    private void cemailKeyReleased(java.awt.event.KeyEvent evt) {                                   
        Boolean at = false;
        Boolean dotcom = false;
        
        for(int x = 1; x <= cemail.getText().length(); x++) {
            if(cemail.getText().substring(x-1, x).equals("@") && x > 3){  // Checks the text field if there is an @ and if the characters are greater than 3 
                at = true;  // If the if condition is true, at is set to true
                        
            } else{
                elabel.setForeground(Color.red);
                elabel.setText("Bad E-mail");
            }
         
         if(x > 5 && cemail.getText().substring(x-4, x).equals(".com") && at == true ){ // Checks if the characters are greater than 5(probably after @) and checks if there is a .com and at must be true(if it founds an @ sign)   
                dotcom = true; // If the if conodition is true, dotcom is set to true
                        
            } else{
                elabel.setForeground(Color.red);
                elabel.setText("Bad E-mail");
            }
         
         if(at == true && dotcom == true){  // If both at and dotcom are true, it will return a message saying "Good E-mail"
                elabel.setForeground(Color.green);
                elabel.setText("Good E-mail");
         }
         
             
         
        }
        
        if(cemail.getText().length() == 0){
                elabel.setForeground(Color.red);
                elabel.setText("Empty E-mail input!");
        }
        
        
        
    }                                  

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
     /*   
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        
       if(id == 0)
        tblmodel.setRowCount(0);
        
   
       
        String[] item = {cid.getText(), custname.getText(), cname.getText(), custcontact.getText(), cemail.getText(), cbday.getText(), cgender.getSelectedItem().toString()};
        tblmodel.addRow(item);
        
   
        id++;
        */
       /*
        try{
            
            for(int y = 0; y < 7; y++){
                cust[id][y] = item[y];
            }
            
            
        } catch(Exception e){
            System.out.println("Exception: " + e);
        }
        
        for(int x = 0; x < cust.length;x++){
            for(int y = 0; y < cust[0].length; y++){
                System.out.print(cust[x][y]);
                
            }
            System.out.println("");
        }
        
        id++;
        */

        
        
        
         String inputField = cname.getText();
         String inputEMAIL = cemail.getText();
         String inputBDAY = cbday.getText();
         
         
         Boolean saveInput = false;
        if(inputField.length() == 0 || inputEMAIL.length() == 0 || inputBDAY.length() == 0 ){ // If inputs are left blank, it will return a prompt message
              messagebox("Input fields should not be left blank", "Record");  
              
          }
        else if(inputField.length() != 0 || inputEMAIL.length() != 0 || inputBDAY.length() != 0){  // If all inputs are not blank, saveInput is set to true
               saveInput = true;
         }
          
   ////////////////////////////////////////////////////////////////////////////////////     
        Boolean at = false;
        Boolean dotcom = false;
        Boolean dotcomAt = false;
       
        
        String cEMAIL = cemail.getText();
        
        for(int x = 1; x <= cEMAIL.length(); x++) {
            if(cEMAIL.substring(x-1, x).equals("@") && x > 3){  // Checks the text field if there is an @ and if the characters are greater than 3 
                at = true;  // If the if condition is true, at is set to true
                        
            } else{
              
            }
         
         if(x > 5 && cEMAIL.substring(x-4, x).equals(".com") && at == true ){ // Checks if the characters are greater than 5(probably after @) and checks if there is a .com and at must be true(if it founds an @ sign)   
                dotcom = true; // If the if conodition is true, dotcom is set to true
                        
            } else{
             
           
            }
         
         if(at == true && dotcom == true){  // If both at and dotcom are true, it will return a message saying "Good E-mail"
             
             dotcomAt = true;
         }
        
        } 
        
       
        
        
        
        
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////       
   Boolean et = false;

         String cBDAY = cbday.getText();

         Boolean isCorrect = valDOB(cBDAY); // Calls valDOB which checks if the input is in correct date format
         
         
         
        for(int y = 1; y <= cBDAY.length(); y++){  // Iterates(travels) through the birth date input text field
            
            
         if(isCorrect == true && y > 9){  // If isCorrect is true and input is greater than 9(characters), it returns a label message
             
               et = true;
         } 
         
         else {     
              
         }
         
     }
        
      

        
///////////////////////////////////////////////////  
        
         Boolean saveAge = false;
         String cBdayAge = cbday.getText();
         int resultAge = ageCalc(cBdayAge); // ageCalc calculates the age
         if(resultAge < 18){      // If resultAge(which holds the age value) is < 18, it will return a prompt message
             messagebox("Cannot accept minors!", "Record");
             
         }
         else if(resultAge >= 18){   // If resultAge >= 18 , saveAge is set to true
             saveAge = true;
         }
         
       
         
        
/////////////////////////////////////////////////////////                    
       
     
       
        
        String emailLabel = elabel.getText();
        String bdayLabel = bdaylabel.getText();
      
        
        
        if(saveInput == true && saveAge == true && dotcomAt == true && et == true ){  // If both saveInput and saveAge are set to true, customer can be saved, customer ID is then incremented
                if(deletedID.isEmpty()){
                 messagebox("Save!", "Record");
                 cid.setText(String.valueOf(increSave++));
                } else{
                        cid.setText(deletedID.get(0).toString());  //Access elements of the deletedID arraylist and put it as an ID
                          ListIterator<Integer> iterate = deletedID.listIterator();
                          while(iterate.hasPrevious()){
                            Integer num = iterate.previous();
                                deletedID.remove(num);
                            }
                }
                
                
             // cid.setText(String.valueOf(Integer.parseInt(cid.getText()) + 1));
         }
        
         if(emailLabel.equals("Bad E-mail")){
           messagebox("Cannot accept bad e-mail format!", "Record");
        }
         
         if(bdayLabel.equals("Bad Date Format")){
            messagebox("Cannot accept bad date format!", "Record");
        }
       
         
         
         
         
     
         DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        
       if(id == 0)
        tblmodel.setRowCount(0);
        

        String[] item = {cid.getText(), custname.getText(), cname.getText(), custcontact.getText(), cemail.getText(), cbday.getText(), cgender.getSelectedItem().toString()};
         //  Integer.parseInt(item[0]); //Convert cid value into integer
           
        tblmodel.addRow(item);
        
   
        
        
        id++;
         
         
         
         
         
        
      
    }                                        

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Products abc = new Products();
        abc.setVisible(true);
    }                                          

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
       cid.setEditable(false);
      
    }                                 

    
    
    
    
    
    
    
    public static boolean valDOB(String DOB) // Checks if the input date is in valid format or not
    {
        
        DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
        Date BOD = null;
        df.setLenient(false);
        
        try
        {
            BOD = df.parse(DOB);
            return true;
        }
        catch(Exception e)
        {
            return false;
        }
        
    }
            
    
   public static int ageCalc(String xAge){   // Calculates the age
             String[] values = xAge.split("/");
             int month = Integer.parseInt(values[0]);
             int day = Integer.parseInt(values[1]);
             int year = Integer.parseInt(values[2]);
             
             LocalDate today = LocalDate.now();
             LocalDate bdate = LocalDate.of(year, month, day);
             int years = Period.between(bdate, today).getYears();
             
             return years;
             
             
   }
    
    
    
    
    
    
    
    
    private void cbdayKeyReleased(java.awt.event.KeyEvent evt) {                                  
         Boolean et = false;
         String dob = cbday.getText();
         
         Boolean isCorrect = valDOB(dob); // Calls valDOB which checks if the input is in correct date format
         
         
         
        for(int x = 1; x <= dob.length(); x++){  // Iterates(travels) through the birth date input text field
            
            
         if(isCorrect == true && x > 9){  // If isCorrect is true and input is greater than 9(characters), it returns a label message
             
               et = true;
               bdaylabel.setForeground(Color.green);
                bdaylabel.setText("Good Date Format");
             
           
             
         } 
         
         else {     // else, it returns also a label message
                bdaylabel.setForeground(Color.red);
                bdaylabel.setText("Bad Date Format");
         }
         
            
         if(et == true){  // If et is set/equal to true, then we calculate the age from the date string
             String bop = cbday.getText();  // date string
           int calculatedAge =  ageCalc(bop); // Calls ageCalc which calculates the age and stores the ageValue to calculatedAge
             
             if (calculatedAge < 18){ // If calculatedAge < 18 , it returns a label message 
                 bdaylabel.setForeground(Color.red);
                 bdaylabel.setText("No Minors!");
             }
                      
            
            
         }
         
       
     }
        
          if(cbday.getText().length() == 0){
                bdaylabel.setForeground(Color.red);
                bdaylabel.setText("Empty Date input!");
        }
      
     
      
        
    
    }                                 

    private void mainTableMouseClicked(java.awt.event.MouseEvent evt) {                                       
        int[] selectRow = mainTable.getSelectedRows();
        cid.setText(mainTable.getValueAt(selectRow[0],0).toString());
        custname.setText(mainTable.getValueAt(selectRow[0],1).toString());
        cname.setText(mainTable.getValueAt(selectRow[0],2).toString());
        custcontact.setText(mainTable.getValueAt(selectRow[0],3).toString());
        cemail.setText(mainTable.getValueAt(selectRow[0],4).toString());
        cbday.setText(mainTable.getValueAt(selectRow[0],5).toString());
        cgender.setSelectedItem(mainTable.getValueAt(selectRow[0],6).toString());
  
        
        int getRow = mainTable.getSelectedRow();
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        custname.setText(tblmodel.getValueAt(getRow,1).toString());
        cname.setText(tblmodel.getValueAt(getRow,2).toString());
        custcontact.setText(tblmodel.getValueAt(getRow,3).toString());
        cemail.setText(tblmodel.getValueAt(getRow,4).toString());
        cbday.setText(tblmodel.getValueAt(getRow,5).toString());
        cgender.setSelectedItem(tblmodel.getValueAt(getRow,6).toString());
        
        
      
    }                                      

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
      DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
      int getRowtoDelete = mainTable.getSelectedRow();
      
       tblmodel.removeRow(getRowtoDelete);
      
          
          deletedID.add(Integer.parseInt(tblmodel.getValueAt(getRowtoDelete,0).toString()));
          Collections.sort(deletedID);
         
          /*     
         Iterator<Integer> iterate = deletedID.iterator();
         while(iterate.hasNext()){
             Integer num = iterate.next();
             deletedID.remove(num);
         }
          */
         
         
         
     
      
      
      
      
      
      
      
      
        
        
        
        
        
    }                                            

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int i = mainTable.getSelectedRow();
        DefaultTableModel tblmodel = (DefaultTableModel) mainTable.getModel();
        
        if(i >= 0){
            
            tblmodel.setValueAt(custname.getText(), i, 1);
            tblmodel.setValueAt(cname.getText(), i, 2);
            tblmodel.setValueAt(custcontact.getText(), i, 3);
            tblmodel.setValueAt(cemail.getText(), i, 4);
            tblmodel.setValueAt(cbday.getText(), i, 5);
            tblmodel.setValueAt(cgender.getSelectedItem(), i, 6);
            
    
        }
        
        
    }                                            
        
    private void messagebox(String msg, String titlebar )  // Returns a prompt message
        {
            JOptionPane.showMessageDialog(null, msg, titlebar, JOptionPane.INFORMATION_MESSAGE);
        }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel bdaylabel;
    private javax.swing.JTextField cbday;
    private javax.swing.JTextField cemail;
    private javax.swing.JComboBox cgender;
    private javax.swing.JTextField cid;
    private javax.swing.JTextField cname;
    private javax.swing.JTextField custcontact;
    private javax.swing.JTextField custname;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel elabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mainTable;
    private javax.swing.JButton updateButton;
    // End of variables declaration                   
}
